---
// src/components/Analytics.astro
// Clean analytics implementation
// upated 19-08-25 15:22

const siteId = Astro.site ? new URL(Astro.site).hostname : "localhost";
---

<script define:vars={{ siteId }} is:inline>
  (function () {
    // Skip in development
    if (
      location.hostname === "localhost" ||
      location.hostname === "127.0.0.1"
    ) {
      console.log("ðŸš§ Analytics disabled in development");
      return;
    }

    function generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      });
    }

    function initializeAnalytics() {
      // Prevent duplicate sends within 2 seconds
      const now = Date.now();
      const lastSent = sessionStorage.getItem("last_analytics_send");
      if (lastSent && now - parseInt(lastSent) < 2000) {
        return;
      }
      sessionStorage.setItem("last_analytics_send", now.toString());

      // Get or create session
      let sessionId = sessionStorage.getItem("session_id");
      if (!sessionId) {
        sessionId = generateUUID();
        sessionStorage.setItem("session_id", sessionId);
        sessionStorage.setItem("session_start", Date.now().toString());
      }

      // Track page visits
      const pageKey = `page_${location.pathname}`;
      const isFirstVisit = !sessionStorage.getItem(pageKey);
      if (isFirstVisit) {
        sessionStorage.setItem(pageKey, Date.now().toString());
      }

      // Basic metrics
      const startTime = Date.now();
      const metrics = {
        session_id: sessionId,
        site_id: siteId,
        url: location.href,
        path: location.pathname,
        referrer: document.referrer || null,
        screen_width: window.screen.width,
        screen_height: window.screen.height,
        user_agent: navigator.userAgent,
        timestamp: startTime,
        is_first_visit: isFirstVisit,
        // CWV placeholders
        lcp: null,
        fid: null,
        cls: 0,
        fcp: null,
        ttfb: null,
        duration_ms: 0,
      };

      // Core Web Vitals tracking
      // LCP - Largest Contentful Paint
      new PerformanceObserver((list) => {
        const lastEntry = list.getEntries().pop();
        if (lastEntry) {
          metrics.lcp =
            lastEntry.renderTime || lastEntry.loadTime || lastEntry.startTime;
        }
      }).observe({ type: "largest-contentful-paint", buffered: true });

      // FID - First Input Delay
      new PerformanceObserver((list) => {
        const firstInput = list.getEntries()[0];
        if (firstInput && firstInput.processingStart) {
          metrics.fid = firstInput.processingStart - firstInput.startTime;
        }
      }).observe({ type: "first-input", buffered: true });

      // CLS - Cumulative Layout Shift
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput && entry.value !== undefined) {
            metrics.cls += entry.value;
          }
        }
      }).observe({ type: "layout-shift", buffered: true });

      // FCP - First Contentful Paint
      new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.name === "first-contentful-paint") {
            metrics.fcp = entry.startTime;
          }
        }
      }).observe({ type: "paint", buffered: true });

      // TTFB - Time to First Byte
      const navEntry = performance.getEntriesByType("navigation")[0];
      if (navEntry && navEntry.responseStart) {
        metrics.ttfb = navEntry.responseStart;
      }

      console.log("ðŸ“Š Analytics:", metrics);

      // Send metrics after a delay to capture CWV
      setTimeout(() => {
        metrics.duration_ms = Date.now() - startTime;

        const blob = new Blob([JSON.stringify(metrics)], {
          type: "application/json",
        });

        if (navigator.sendBeacon) {
          navigator.sendBeacon("/.netlify/functions/pandalytics", blob);
        } else {
          fetch("/.netlify/functions/pandalytics", {
            method: "POST",
            body: JSON.stringify(metrics),
            headers: { "Content-Type": "application/json" },
            keepalive: true,
          }).catch(() => {});
        }
      }, 1000);
    }

    // Initialize on page load
    initializeAnalytics();

    // Handle Astro view transitions
    document.addEventListener("astro:page-load", initializeAnalytics);
  })();
</script>
