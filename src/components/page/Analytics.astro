---
// src/components/Analytics.astro

/* Client script for Core Web Vitals + session tracking */
---

<script>
  (function () {
    function generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      });
    }

    const siteId = "Phuket Property"; // Change per site

    let sessionId = localStorage.getItem("session_id");
    if (!sessionId) {
      sessionId = generateUUID();
      localStorage.setItem("session_id", sessionId);
      localStorage.setItem("session_start", Date.now().toString());
      localStorage.setItem("pageviews_in_session", "0");
    }

    // Only increment pageviews if this is a new page load, not a script re-run
    const currentPageKey = `visited_${sessionId}_${location.pathname}`;
    const hasVisitedThisPage = localStorage.getItem(currentPageKey);

    let pageviews = parseInt(
      localStorage.getItem("pageviews_in_session") || "0",
      10,
    );
    let isNewPageVisit = false;

    if (!hasVisitedThisPage) {
      pageviews += 1;
      isNewPageVisit = true;
      localStorage.setItem("pageviews_in_session", pageviews.toString());
      localStorage.setItem(currentPageKey, "true");
    }

    // Metrics store
    let metrics = {
      session_id: sessionId,
      site_id: siteId,
      url: location.href,
      path: location.pathname,
      referrer: document.referrer || null,
      screen_width: window.screen.width,
      screen_height: window.screen.height,
      user_agent: navigator.userAgent,
      lcp: null as number | null,
      cls: 0,
      fid: null as number | null,
      fcp: null as number | null,
      ttfb: null as number | null,
      inp: null as number | null,
      duration_ms: 0,
      bounce: pageviews === 1 ? 1 : 0,
      pageviews_in_session: pageviews,
    };

    // Only send metrics if this is a new page visit
    if (!isNewPageVisit) {
      console.log(
        "🚫 Page already visited in this session, not sending metrics",
      );
      return;
    }

    const poLCP = new PerformanceObserver((list) => {
      const lastEntry = list.getEntries().pop() as
        | PerformanceNavigationTiming
        | PerformancePaintTiming
        | any;
      if (lastEntry) {
        metrics.lcp =
          lastEntry.renderTime || lastEntry.loadTime || lastEntry.startTime;
      }
    });
    poLCP.observe({ type: "largest-contentful-paint", buffered: true });

    const poFID = new PerformanceObserver((list) => {
      const firstInput = list.getEntries()[0] as any;
      if (firstInput && firstInput.processingStart) {
        metrics.fid = firstInput.processingStart - firstInput.startTime;
      }
    });
    poFID.observe({ type: "first-input", buffered: true });

    const poCLS = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        const clsEntry = entry as any;
        if (!clsEntry.hadRecentInput && clsEntry.value !== undefined) {
          metrics.cls += clsEntry.value;
        }
      }
    });
    poCLS.observe({ type: "layout-shift", buffered: true });

    const poPaint = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.name === "first-contentful-paint") {
          metrics.fcp = entry.startTime;
        }
      }
    });
    poPaint.observe({ type: "paint", buffered: true });

    const navEntry = performance.getEntriesByType(
      "navigation",
    )[0] as PerformanceNavigationTiming;
    if (navEntry && navEntry.responseStart) {
      metrics.ttfb = navEntry.responseStart;
    }

    // Duration tracking
    const start = Date.now();
    const pageLoadKey = `metrics_sent_${sessionId}_${location.pathname}_${start}`;
    let metricsSent = localStorage.getItem(pageLoadKey) === "true";

    console.log("🔧 Analytics script initialized for session:", sessionId);

    window.addEventListener("beforeunload", () => {
      console.log("🚪 beforeunload event, metricsSent:", metricsSent);
      if (!metricsSent) {
        metrics.duration_ms = Date.now() - start;
        sendMetrics();
      }
    });
    document.addEventListener("visibilitychange", () => {
      console.log(
        "👁️ visibilitychange event, state:",
        document.visibilityState,
        "metricsSent:",
        metricsSent,
      );
      if (document.visibilityState === "hidden" && !metricsSent) {
        metrics.duration_ms = Date.now() - start;
        sendMetrics();
      }
    });

    function sendMetrics() {
      if (metricsSent) {
        console.log("⚠️ Metrics already sent, skipping");
        return;
      }
      metricsSent = true;
      localStorage.setItem(pageLoadKey, "true");
      console.log("📤 Sending metrics:", metrics);

      const blob = new Blob([JSON.stringify(metrics)], {
        type: "application/json",
      });

      if (!navigator.sendBeacon("/.netlify/functions/pandalytics", blob)) {
        fetch("/.netlify/functions/pandalytics", {
          method: "POST",
          body: JSON.stringify(metrics),
          headers: {
            "Content-Type": "application/json",
          },
          keepalive: true,
        }).catch(() => {});
      }
    }

    // Clean up old metrics_sent keys (keep only last 10 entries)
    const allKeys = Object.keys(localStorage);
    const metricKeys = allKeys.filter((key) => key.startsWith("metrics_sent_"));
    if (metricKeys.length > 10) {
      metricKeys.sort();
      metricKeys.slice(0, -10).forEach((key) => localStorage.removeItem(key));
    }
  })();
</script>
